{"version":3,"sources":["Snake.js","Food.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Snake","this","props","snakeDots","map","dot","i","style","left","top","className","key","Component","Food","getRandomCoords","Math","floor","random","initialState","food","speed","direction","score","Board","state","onKeyDown","e","window","event","keyCode","setState","console","log","moveSnake","dots","head","length","push","shift","checkIfOutOfBounds","onGameOver","alert","setInterval","document","onkeydown","checkIfCollapsed","checkIfEat","snake","pop","forEach","getRandomFood","growSnake","increaseSpeed","newSnake","unshift","Button","variant","Badge","App","board1","React","createRef","current","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAEqBA,E,uKAEjB,OACE,6BACGC,KAAKC,MAAMC,UAAUC,KAAI,SAACC,EAAKC,GAC9B,IAAMC,EAAQ,CACZC,KAAK,GAAD,OAAKH,EAAI,GAAT,KACNI,IAAI,GAAD,OAAKJ,EAAI,GAAT,MAEH,OAAO,yBAAKK,UAAU,YAAYC,IAAKL,EAAGC,MAAOA,Y,GATxBK,aCAdC,E,uKAEb,IAAMN,EAAQ,CACVC,KAAK,GAAD,OAAKP,KAAKC,MAAMG,IAAI,GAApB,KACJI,IAAI,GAAD,OAAKR,KAAKC,MAAMG,IAAI,GAApB,MAGP,OACI,yBAAKK,UAAU,aAAaH,MAAOA,Q,GARbK,a,gBCI5BE,EAAkB,WAKtB,MAAO,CAF2D,EAA1DC,KAAKC,OAAO,GAAAD,KAAKE,SAFf,GAEmD,GACK,EAA1DF,KAAKC,OAAO,GAAAD,KAAKE,SAHf,GAGmD,KAIzDC,EAAe,CACnBC,KAAML,IACNM,MAAO,IACPC,UAAW,QACXlB,UAAW,CACT,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAENmB,MAAO,GA0JMC,E,4MAtJbC,MAAQN,E,EAaRO,UAAY,SAACC,GAEX,QADAA,EAAIA,GAAKC,OAAOC,OACNC,SACR,KAAK,GACL,KAAK,GAC0B,SAAzB,EAAKL,MAAMH,WACb,EAAKS,SAAS,CAAET,UAAW,OAE7B,MACF,KAAK,GACL,KAAK,GAC0B,OAAzB,EAAKG,MAAMH,WACb,EAAKS,SAAS,CAAET,UAAW,SAE7B,MACF,KAAK,GACL,KAAK,GAC0B,SAAzB,EAAKG,MAAMH,WACb,EAAKS,SAAS,CAAET,UAAW,UAE7B,MACF,KAAK,GACL,KAAK,GACyB,UAAzB,EAAKG,MAAMH,WACZ,EAAKS,SAAS,CAAET,UAAW,SAE7B,MACF,QACEU,QAAQC,IAAI,yB,EAKlBC,UAAY,WACV,IAAIC,EAAI,YAAO,EAAKV,MAAMrB,WACtBgC,EAAOD,EAAKA,EAAKE,OAAS,GAE9B,OAAQ,EAAKZ,MAAMH,WACjB,IAAK,QACHc,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAC3B,MACF,IAAK,KACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAM/BD,EAAKG,KAAKF,GACVD,EAAKI,QACL,EAAKR,SAAS,CACZ3B,UAAW+B,K,EAIfK,mBAAqB,WACnB,IAAIJ,EAAO,EAAKX,MAAMrB,UAAU,EAAKqB,MAAMrB,UAAUiC,OAAS,IAC1DD,EAAK,IAAM,KAAOA,EAAK,IAAM,KAAOA,EAAK,GAAK,GAAKA,EAAK,GAAK,IAC/D,EAAKK,c,EAqDTA,WAAa,WACXC,MAAM,8BAAD,OAA+B,EAAKjB,MAAMrB,UAAUiC,SACzD,EAAKN,SAASZ,I,kEAjIdwB,YAAYzC,KAAKgC,UAAWhC,KAAKuB,MAAMJ,OACvCuB,SAASC,UAAY3C,KAAKwB,Y,2CAI1BxB,KAAKsC,qBACLtC,KAAK4C,mBACL5C,KAAK6C,e,yCAuEa,IAAD,OACbC,EAAK,YAAO9C,KAAKuB,MAAMrB,WACvBgC,EAAOY,EAAMC,MACjBD,EAAME,SAAQ,SAAC5C,GACT8B,EAAK,KAAO9B,EAAI,IAAM8B,EAAK,KAAO9B,EAAI,IACxC,EAAKmC,kB,mCAMT,IAAIL,EAAOlC,KAAKuB,MAAMrB,UAAUF,KAAKuB,MAAMrB,UAAUiC,OAAS,GAC1DjB,EAAOlB,KAAKuB,MAAML,KAClBgB,EAAK,KAAOhB,EAAK,IAAMgB,EAAK,KAAOhB,EAAK,KAC1ClB,KAAK6B,SAAS,CACZX,KAAMlB,KAAKiD,gBACX5B,MAAOrB,KAAKuB,MAAMF,MAAQ,IAE5BrB,KAAKkD,YACLlD,KAAKmD,mB,sCAKP,IAAIjC,EAAOL,IACF,YAAOb,KAAKuB,MAAMrB,WACrB8C,SAAQ,SAAC5C,GACTc,EAAK,KAAOd,EAAI,IAAMc,EAAK,KAAOd,EAAI,KACxCc,EAAOL,U,kCAMX,IAAIuC,EAAQ,YAAOpD,KAAKuB,MAAMrB,WAC9BkD,EAASC,QAAQ,IACjBrD,KAAK6B,SAAS,CACZ3B,UAAWkD,M,sCAKTpD,KAAKuB,MAAMJ,MAAQ,IACrBnB,KAAK6B,SAAS,CACZV,MAAOnB,KAAKuB,MAAMJ,MAAQ,O,+BAW9B,OACE,oCACE,kBAACmC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,SACQ,kBAACC,EAAA,EAAD,CAAOD,QAAQ,SAASvD,KAAKuB,MAAMF,QAE3C,yBAAKZ,UAAU,aACb,kBAAC,EAAD,CAAOP,UAAWF,KAAKuB,MAAMrB,YAC7B,kBAAC,EAAD,CAAME,IAAKJ,KAAKuB,MAAML,a,GAhJZP,aCJL8C,G,wDAjBb,WAAYxD,GAAO,IAAD,8BAChB,cAAMA,IACDyD,OAASC,IAAMC,YAFJ,E,qDAMK5D,KAAK0D,OAAOG,QACjC,OACE,oCACE,8CAEA,kBAAC,EAAD,CAAOC,IAAK9D,KAAK0D,c,GAZP/C,cCQEoD,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.d4e49c9d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Snake extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.snakeDots.map((dot, i) => {\r\n          const style = {\r\n            left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`\r\n          };\r\n          return <div className=\"snake-dot\" key={i} style={style}></div>;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Food extends Component {\r\n    render() {\r\n        const style = {\r\n            left: `${this.props.dot[0]}%`,\r\n            top: `${this.props.dot[1]}%`,\r\n        }\r\n\r\n        return (\r\n            <div className='snake-food' style={style}></div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Snake from \"./Snake\";\r\nimport Food from \"./Food\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nconst getRandomCoords = () => {\r\n  let min = 1;\r\n  let max = 98;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  return [x, y];\r\n};\r\n\r\nconst initialState = {\r\n  food: getRandomCoords(),\r\n  speed: 200,\r\n  direction: \"RIGHT\",\r\n  snakeDots: [\r\n    [0, 0],\r\n    [0, 4],\r\n    [0, 2],\r\n  ],\r\n  score: 0,\r\n};\r\n\r\nclass Board extends Component {\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkIfOutOfBounds();\r\n    this.checkIfCollapsed();\r\n    this.checkIfEat();\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 87:\r\n      case 38:\r\n        if (this.state.direction !== \"DOWN\") {\r\n          this.setState({ direction: \"UP\" });\r\n        }\r\n        break;\r\n      case 83:\r\n      case 40:\r\n        if (this.state.direction !== \"UP\") {\r\n          this.setState({ direction: \"DOWN\" });\r\n        }\r\n        break;\r\n      case 68:\r\n      case 39:\r\n        if (this.state.direction !== \"LEFT\") {\r\n          this.setState({ direction: \"RIGHT\" });\r\n        }\r\n        break;\r\n      case 65:\r\n      case 37:\r\n        if(this.state.direction !== \"RIGHT\"){\r\n          this.setState({ direction: \"LEFT\" });\r\n        }\r\n        break;\r\n      default:\r\n        console.log(\"useless key pressed\");\r\n        break;\r\n    }\r\n  };\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case \"RIGHT\":\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case \"LEFT\":\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case \"DOWN\":\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case \"UP\":\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots,\r\n    });\r\n  };\r\n\r\n  checkIfOutOfBounds = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  };\r\n\r\n  checkIfCollapsed() {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake.pop();\r\n    snake.forEach((dot) => {\r\n      if (head[0] === dot[0] && head[1] === dot[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkIfEat() {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({\r\n        food: this.getRandomFood(),\r\n        score: this.state.score + 1,\r\n      });\r\n      this.growSnake();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  getRandomFood() {\r\n    let food = getRandomCoords();\r\n    let snake = [...this.state.snakeDots];\r\n    snake.forEach((dot) => {\r\n      if (food[0] === dot[0] && food[1] === dot[1]) {\r\n        food = getRandomCoords();\r\n      }\r\n    });\r\n  }\r\n\r\n  growSnake() {\r\n    let newSnake = [...this.state.snakeDots];\r\n    newSnake.unshift([]);\r\n    this.setState({\r\n      snakeDots: newSnake,\r\n    });\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10,\r\n      });\r\n    }\r\n  }\r\n\r\n  onGameOver = () => {\r\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Button variant=\"primary\">\r\n          Score <Badge variant=\"light\">{this.state.score}</Badge>\r\n        </Button>\r\n        <div className=\"game-area\">\r\n          <Snake snakeDots={this.state.snakeDots} />\r\n          <Food dot={this.state.food} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport Board from './Board';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.board1 = React.createRef();\n  }\n\n  render() {\n    const currentBoard = this.board1.current || 0;\n    return (\n      <>\n        <header>Snake Game</header>\n        \n        <Board ref={this.board1} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}